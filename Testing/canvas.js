const canvas = document.getElementById('test-canvas');
//line below gives us access to canvas API
const ctx = canvas.getContext('2d');

// canva.fillStyle = 'red';

// canva.fillRect(50,50,100,100);

//continuously renders your screen
// const updateAll = () => {
//     draw();
//     window.requestAnimationFrame(updateAll);
// }
// window.onload = () => {
//     window.requestAnimationFrame(updateAll);
// }
const tileAtlas = new Image();
tileAtlas.src = '/Users/GraceWang/Desktop/StonyBrook/SBUMaps/SBUMaps Codebase/SBUMapsJS/Images/TileSheet 32x32.png';
//onload method is used to call our draw function once the image is loaded into js
tileAtlas.onload = () => {draw()}

let tileSize = 32;
let tileOutputSize = 0.5;
let updatedTileSize = tileSize * tileOutputSize;

// dimension for entire tile sheet is 301 x 301 tiles

let atlasRow = 301;
let atlasCol = 301;

// map rows and columns for frey floor 1 layer 1
// let mapRows = 43;
// let mapCols = 31;

// map rows x cols for frey floor 2 and 3
// let mapRows = 18;
// let mapCols = 43;



let freyFloor1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 2, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 6, 303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 0, 0, 1206, 1205, 1210, 0, 0, 302, 0, 0, 0, 0, 0, 0, 1206, 1205, 1214, 0, 0, 0, 0, 0, 0, 0, 302, 6, 303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 6, 303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 6, 303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 608, 909, 608, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 6, 303, 0, 0, 0, 1206, 1206, 1214, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 608, 608, 909, 608, 6, 909, 610, 6, 608, 608, 909, 608, 608, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 608, 608, 6, 303, 0, 0, 0, 0, 0, 0, 0, 0, 302, 608, 303, 0, 0,
    0, 0, 302, 0, 0, 0, 302, 6, 307, 911, 6, 303, 0, 0, 0, 303, 0, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 302, 6, 303, 0, 0, 0, 0, 0, 0, 0, 0, 302, 306, 303, 0, 0,
    0, 0, 302, 0, 0, 0, 302, 6, 306, 608, 6, 303, 0, 0, 0, 303, 0, 1206, 1206, 1207, 0, 303, 0, 1206, 1206, 1213, 0, 302, 6, 303, 0, 0, 0, 0, 0, 0, 0, 0, 302, 307, 303, 0, 0,
    0, 0, 302, 0, 0, 0, 302, 6, 307, 608, 6, 303, 0, 0, 0, 303, 0, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 304, 6, 303, 0, 0, 0, 0, 0, 0, 0, 0, 302, 306, 303, 0, 0,
    0, 0, 302, 608, 608, 608, 608, 6, 608, 608, 6, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 6, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 909, 303, 0, 0,
    0, 0, 304, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 305, 0, 0,
    0, 0, 304, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 305, 0, 0,
    0, 0, 302, 608, 608, 608, 608, 608, 608, 608, 608, 909, 909, 909, 608, 608, 909, 909, 608, 608, 608, 608, 608, 608, 909, 909, 608, 909, 909, 608, 909, 909, 608, 608, 608, 608, 608, 608, 608, 608, 303, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 1206, 1205, 1205, 0, 0, 0, 0, 302, 0, 0, 0, 0, 1206, 1205, 1207, 0, 0, 0, 0, 302, 0, 0, 0, 0, 309, 1206, 1209, 1209, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 0, 302, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 303, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

    //now we want to draw the map into js, and to our html file

let freyFloor2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 1, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 2, 0, 0,
            0, 302, 308, 308, 308, 308, 308, 308, 308, 302, 308, 308, 308, 308, 308, 308, 308, 302, 308, 308, 308, 303, 308, 308, 308, 308, 308, 308, 302, 308, 308, 308, 308, 303, 308, 308, 308, 308, 308, 308, 303, 0, 0,
            0, 302, 0, 0, 1207, 1205, 1206, 0, 0, 302, 0, 0, 1207, 1205, 1210, 0, 0, 302, 0, 0, 0, 303, 0, 1207, 1206, 1206, 0, 0, 302, 0, 0, 0, 0, 303, 0, 1207, 1206, 1212, 0, 0, 303, 0, 0,
            0, 302, 0, 0, 308, 308, 308, 0, 0, 302, 0, 0, 308, 308, 308, 308, 0, 302, 0, 0, 0, 303, 0, 308, 308, 308, 0, 0, 302, 0, 0, 0, 0, 303, 0, 308, 308, 308, 0, 0, 303, 0, 0,
            0, 302, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 303, 0, 0,
            0, 302, 608, 909, 608, 608, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 909, 608, 909, 608, 608, 608, 909, 608, 608, 608, 608, 909, 608, 0, 0, 0, 0, 608, 909, 608, 608, 608, 909, 608, 303, 0, 0,
            0, 304, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 305, 0, 0,
            0, 302, 608, 608, 608, 909, 303, 302, 909, 303, 302, 610, 303, 302, 909, 608, 608, 608, 608, 303, 302, 909, 608, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 909, 303, 0, 0,
            0, 302, 0, 0, 0, 0, 303, 302, 306, 303, 302, 911, 303, 302, 0, 0, 0, 0, 0, 303, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 306, 303, 0, 0,
            0, 302, 0, 0, 0, 0, 303, 302, 307, 303, 302, 608, 303, 302, 0, 1207, 1206, 1211, 0, 303, 302, 0, 1207, 1207, 1207, 0, 302, 0, 1207, 1207, 1209, 0, 302, 0, 1207, 1207, 1211, 0, 302, 307, 303, 0, 0,
            0, 302, 0, 0, 0, 0, 303, 302, 306, 303, 0, 0, 0, 302, 0, 0, 0, 0, 0, 303, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 306, 303, 0, 0,
            0, 302, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 303, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

let freyFloor3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 2, 0, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0,
    0, 0, 302, 0, 0, 1208, 1205, 1206, 0, 302, 0, 0, 1208, 1205, 1210, 0, 302, 0, 0, 1208, 1205, 1214, 0, 302, 0, 0, 1208, 1206, 1208, 0, 0, 303, 0, 1208, 1206, 1212, 0, 0, 0, 303, 0, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0,
    0, 0, 302, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0,
    0, 0, 302, 909, 608, 608, 608, 608, 608, 909, 608, 909, 608, 608, 608, 608, 909, 608, 909, 608, 608, 608, 608, 909, 608, 909, 608, 608, 608, 608, 909, 608, 909, 608, 608, 608, 608, 608, 909, 303, 0, 0, 0,
    0, 0, 302, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 303, 0, 0, 0,
    0, 0, 302, 608, 909, 608, 608, 302, 909, 610, 303, 0, 0, 0, 302, 909, 608, 608, 608, 608, 303, 0, 0, 0, 302, 909, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 0, 302, 909, 303, 0, 0, 0,
    0, 0, 302, 0, 0, 0, 302, 302, 307, 610, 303, 0, 0, 0, 302, 0, 0, 0, 0, 0, 303, 0, 0, 0, 302, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 0, 302, 306, 303, 0, 0, 0,
    0, 0, 302, 0, 0, 0, 302, 302, 306, 608, 303, 0, 0, 0, 302, 0, 1208, 1206, 1211, 0, 303, 0, 0, 0, 302, 0, 1208, 1207, 1211, 302, 0, 1208, 1207, 1213, 0, 302, 0, 302, 307, 303, 0, 0, 0,
    0, 0, 302, 0, 0, 0, 302, 302, 307, 303, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 303, 0, 0, 0, 302, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 0, 302, 306, 303, 0, 0, 0,
    0, 0, 603, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 604, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    // used to keep track of the current position in the map array
    let mapIndex = 0;
    // source x and y are used to specify the source coordinates within a tile atlas image where the program should grab indvidiual tiles
    let sourceX = 0;
    let sourceY = 0;

    function draw(){
        // drawLayer(freyFloor1, 31, 43);
        drawLayer(freyFloor2, 18, 43);
        // drawLayer(freyFloor3, 18, 43);
        function drawLayer(layer, mapRows, mapCols){
            let mapHeight = mapRows * tileSize;
            let mapWidth = mapCols * tileSize;
            // iterates over columns (vertical) of map, increments by the value of tile size in each iteration
            for (let col = 0; col < mapHeight; col += tileSize){
                // iterates over rows (horizontal) of map
                for (let row = 0; row < mapWidth; row += tileSize){
                    // line below retrieves value of the tile at the current mapIndex from the map array. This num corresponds to a specific tile in the tile atlas 
                    let tileVal = layer[mapIndex];
                    if (tileVal != 0){
                        // the tile software used to create the map starts counting from 1 so each value in the freyFloor1 array is off by 1
                        tileVal -= 1;
                        // the code below is finding where the tile is on the tile atlas
                        sourceY = Math.floor(tileVal/atlasCol) * tileSize;
                        sourceX = (tileVal % atlasCol) * tileSize;
                        // this says, start cutting at an x position of 0 and a Y position of 32px
                        // drawImage parameters: source of atlas, how many pixels on X axis should we begin cutting from, how many pixels on the Y axis should we begin cutting from
                        // how many pixels across the X axis to be cut, how many pixels across the Y axis to be cut
                        // the destination canvas X coordinate. This is where the top left corner of the tile should be drawn in the destination canvas, same for Y, the width of the tile to be drawn on the destination canvas, the height of the tile to be drawn on the destination canvas
                        ctx.drawImage(tileAtlas, sourceX, sourceY, tileSize, tileSize, row * tileOutputSize, col * tileOutputSize, updatedTileSize, updatedTileSize);
                    }
                    mapIndex++;
                }
            }
        }
       
    }