import { checkNeighbors, makeAdjLst, bfs, generatePath, chooseDoorIndices } from './IndoorNavAlgorithm';
import {buildings} from './mapRecords'

// test('neighbors should find neighbors', () => {
//     let map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 1, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 2, 0, 0,
//         0, 302, 308, 308, 308, 308, 308, 308, 308, 302, 308, 308, 308, 308, 308, 308, 308, 302, 308, 308, 308, 303, 308, 308, 308, 308, 308, 308, 302, 308, 308, 308, 308, 303, 308, 308, 308, 308, 308, 308, 303, 0, 0,
//         0, 302, 0, 0, 1207, 1205, 1206, 0, 0, 302, 0, 0, 1207, 1205, 1210, 0, 0, 302, 0, 0, 0, 303, 0, 1207, 1206, 1206, 0, 0, 302, 0, 0, 0, 0, 303, 0, 1207, 1206, 1212, 0, 0, 303, 0, 0,
//         0, 302, 0, 0, 308, 308, 308, 0, 0, 302, 0, 0, 308, 308, 308, 308, 0, 302, 0, 0, 0, 303, 0, 308, 308, 308, 0, 0, 302, 0, 0, 0, 0, 303, 0, 308, 308, 308, 0, 0, 303, 0, 0,
//         0, 302, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 303, 0, 0,
//         0, 302, 608, 909, 608, 608, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 909, 608, 909, 608, 608, 608, 909, 608, 608, 608, 608, 909, 608, 0, 0, 0, 0, 608, 909, 608, 608, 608, 909, 608, 303, 0, 0,
//         0, 304, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 305, 0, 0,
//         0, 302, 608, 608, 608, 909, 303, 302, 909, 303, 302, 610, 303, 302, 909, 608, 608, 608, 608, 303, 302, 909, 608, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 909, 303, 0, 0,
//         0, 302, 0, 0, 0, 0, 303, 302, 306, 303, 302, 911, 303, 302, 0, 0, 0, 0, 0, 303, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 306, 303, 0, 0,
//         0, 302, 0, 0, 0, 0, 303, 302, 307, 303, 302, 608, 303, 302, 0, 1207, 1206, 1211, 0, 303, 302, 0, 1207, 1207, 1207, 0, 302, 0, 1207, 1207, 1209, 0, 302, 0, 1207, 1207, 1211, 0, 302, 307, 303, 0, 0,
//         0, 302, 0, 0, 0, 0, 303, 302, 306, 303, 0, 0, 0, 302, 0, 0, 0, 0, 0, 303, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 306, 303, 0, 0,
//         0, 302, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 303, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

//     // new trials:
//     const set = checkNeighbors(311, map, 17, 42)
//     const realSet = new Set ([354])
//     console.log(map[311])
//     expect(set).toEqual(realSet)
//     // console.log(map[348])


// });

// test('adjlst creates new list and testing bfs', () => {
//     // let freyFloor2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//     //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//     //     0, 1, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 2, 0, 0,
//     //     0, 302, 308, 308, 308, 308, 308, 308, 308, 302, 308, 308, 308, 308, 308, 308, 308, 302, 308, 308, 308, 303, 308, 308, 308, 308, 308, 308, 302, 308, 308, 308, 308, 303, 308, 308, 308, 308, 308, 308, 303, 0, 0,
//     //     0, 302, 0, 0, 1207, 1205, 1206, 0, 0, 302, 0, 0, 1207, 1205, 1210, 0, 0, 302, 0, 0, 0, 303, 0, 1207, 1206, 1206, 0, 0, 302, 0, 0, 0, 0, 303, 0, 1207, 1206, 1212, 0, 0, 303, 0, 0,
//     //     0, 302, 0, 0, 308, 308, 308, 0, 0, 302, 0, 0, 308, 308, 308, 308, 0, 302, 0, 0, 0, 303, 0, 308, 308, 308, 0, 0, 302, 0, 0, 0, 0, 303, 0, 308, 308, 308, 0, 0, 303, 0, 0,
//     //     0, 302, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 303, 0, 0,
//     //     0, 302, 608, 909, 608, 608, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 909, 608, 909, 608, 608, 608, 909, 608, 608, 608, 608, 909, 608, 0, 0, 0, 0, 608, 909, 608, 608, 608, 909, 608, 303, 0, 0,
//     //     0, 304, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 305, 0, 0,
//     //     0, 302, 608, 608, 608, 909, 303, 302, 909, 303, 302, 610, 303, 302, 909, 608, 608, 608, 608, 303, 302, 909, 608, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 909, 303, 0, 0,
//     //     0, 302, 0, 0, 0, 0, 303, 302, 306, 303, 302, 911, 303, 302, 0, 0, 0, 0, 0, 303, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 306, 303, 0, 0,
//     //     0, 302, 0, 0, 0, 0, 303, 302, 307, 303, 302, 608, 303, 302, 0, 1207, 1206, 1211, 0, 303, 302, 0, 1207, 1207, 1207, 0, 302, 0, 1207, 1207, 1209, 0, 302, 0, 1207, 1207, 1211, 0, 302, 307, 303, 0, 0,
//     //     0, 302, 0, 0, 0, 0, 303, 302, 306, 303, 0, 0, 0, 302, 0, 0, 0, 0, 0, 303, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 306, 303, 0, 0,
//     //     0, 302, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 303, 0, 0,
//     //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//     //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//     //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//     //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
//         let freyFloor1 = buildings.freyHall.floor1
//         // const result = makeAdjLst(freyFloor2, 17, 42)
//         const result = makeAdjLst(freyFloor1.array, 30, 42)
//         // console.log(result.adjLst)
//         // console.log('inital', result.hallwayTileIndices)

//         // const test = bfs(result.adjLst, 304, 304, new Set<number>(), result.hallwayTileIndices)
//         // const testFreyFloor2 = bfs(result.adjLst, 304, 420, new Set<number>(), result.hallwayTileIndices)
//         const testFreyFloor1 = bfs(result.adjLst, 348, 761, new Set<number>(), result.hallwayTileIndices)

//         // for (const t of test)
//         // console.log(t)
//         const stringPath = generatePath(testFreyFloor1, 42, 32);
//         console.log(testFreyFloor1)
//         console.log(stringPath)
        
//         // console.log('final', result.hallwayTileIndices)

        
// })

test('choose door indices', () => {
    const map = buildings.freyHall.floor1.roomNumDoorAssociation
    const cols = buildings.freyHall.floor1.cols
    console.log(chooseDoorIndices("112", "5", map, cols))
})

