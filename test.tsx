import Buildings from './mapRecords'

enum Tiles {
    HallwayTile = 6,
    LeftDoor = 908,
    CenterDoor = 909,
    RightDoor = 910,
    OpenRightDoor = 305,
    OpenLeftDoor = 304
}

const checkNeighbors = (index: number, map: number[], rows: number, cols: number) => {
    
    let indexAbove = -1
    let indexBelow = -1
    let indexRight = -1
    let indexLeft = -1
    let neighbors: Set<number> = new Set();
    // Index of tile above current tile: numCol tiles back
    if ((index - (cols)) > 0){
        indexAbove = index - cols
        // if the index is a hallway or door tile, then add to neighbors list
        if (Object.values(Tiles).includes(map[indexAbove]))
        neighbors.add(indexAbove)
    } 
    // Index below current tile: numCol tiles forward
    if (index + cols < ((rows*cols)+1)){
        indexBelow = index + cols
        if (Object.values(Tiles).includes(map[indexBelow]))
        neighbors.add(indexBelow)
    } 
    // Index left of tile: 1 tile back
    if (index > 0 && (index-1) % cols != 0){
        indexLeft = index - 1
        if (Object.values(Tiles).includes(map[indexLeft]))
        neighbors.add(indexLeft)
    }
    // Index right of tile: 1 tile forward
    if ((index) % cols != 0){
        indexRight = index + 1
        if (Object.values(Tiles).includes(map[indexRight]))
        neighbors.add(indexRight)
    }

    return neighbors

}

let map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 2, 0, 0,
    0, 302, 308, 308, 308, 308, 308, 308, 308, 302, 308, 308, 308, 308, 308, 308, 308, 302, 308, 308, 308, 303, 308, 308, 308, 308, 308, 308, 302, 308, 308, 308, 308, 303, 308, 308, 308, 308, 308, 308, 303, 0, 0,
    0, 302, 0, 0, 1207, 1205, 1206, 0, 0, 302, 0, 0, 1207, 1205, 1210, 0, 0, 302, 0, 0, 0, 303, 0, 1207, 1206, 1206, 0, 0, 302, 0, 0, 0, 0, 303, 0, 1207, 1206, 1212, 0, 0, 303, 0, 0,
    0, 302, 0, 0, 308, 308, 308, 0, 0, 302, 0, 0, 308, 308, 308, 308, 0, 302, 0, 0, 0, 303, 0, 308, 308, 308, 0, 0, 302, 0, 0, 0, 0, 303, 0, 308, 308, 308, 0, 0, 303, 0, 0,
    0, 302, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 303, 0, 0,
    0, 302, 608, 909, 608, 608, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 909, 608, 909, 608, 608, 608, 909, 608, 608, 608, 608, 909, 608, 0, 0, 0, 0, 608, 909, 608, 608, 608, 909, 608, 303, 0, 0,
    0, 304, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 305, 0, 0,
    0, 302, 608, 608, 608, 909, 303, 302, 909, 303, 302, 610, 303, 302, 909, 608, 608, 608, 608, 303, 302, 909, 608, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 909, 608, 608, 608, 608, 608, 909, 303, 0, 0,
    0, 302, 0, 0, 0, 0, 303, 302, 306, 303, 302, 911, 303, 302, 0, 0, 0, 0, 0, 303, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 306, 303, 0, 0,
    0, 302, 0, 0, 0, 0, 303, 302, 307, 303, 302, 608, 303, 302, 0, 1207, 1206, 1211, 0, 303, 302, 0, 1207, 1207, 1207, 0, 302, 0, 1207, 1207, 1209, 0, 302, 0, 1207, 1207, 1211, 0, 302, 307, 303, 0, 0,
    0, 302, 0, 0, 0, 0, 303, 302, 306, 303, 0, 0, 0, 302, 0, 0, 0, 0, 0, 303, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 302, 306, 303, 0, 0,
    0, 302, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 303, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

test('neighbors should find neighbors', () => {
    const set = checkNeighbors(252, map, 17, 42)
    set.forEach(element => {
        console.log(element)
    });
});

